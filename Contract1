// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BasicMath {
    uint256 constant MAX_INT = type(uint256).max;

    // Event for unique transaction tracking
    event MathExecuted(address indexed sender, string operation, uint256 a, uint256 b, uint256 result, uint256 timestamp);

    function adder(uint256 _a, uint256 _b) external returns (uint256 sum, bool error) {
        if (_b > MAX_INT - _a) {
            emit MathExecuted(msg.sender, "add", _a, _b, 0, block.timestamp);
            return (0, true); // Overflow occurred
        }
        uint256 result = _a + _b;
        emit MathExecuted(msg.sender, "add", _a, _b, result, block.timestamp);
        return (result, false);
    }

    function subtractor(uint256 _a, uint256 _b) external returns (uint256 difference, bool error) {
        if (_b > _a) {
            emit MathExecuted(msg.sender, "sub", _a, _b, 0, block.timestamp);
            return (0, true); // Underflow occurred
        }
        uint256 result = _a - _b;
        emit MathExecuted(msg.sender, "sub", _a, _b, result, block.timestamp);
        return (result, false);
    }
}
