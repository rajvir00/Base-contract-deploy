// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SafeStore {
    address public owner;
    mapping(string => uint256) private data;

    event DataUpdated(string key, uint256 value);
    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function setValue(string calldata key, uint256 value) external onlyOwner {
        data[key] = value;
        emit DataUpdated(key, value);
    }

    function getValue(string calldata key) external view returns (uint256) {
        return data[key];
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}
